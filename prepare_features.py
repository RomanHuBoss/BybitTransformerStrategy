import pandas as pd
import numpy as np
import joblib
import logging
from feature_engineering import FeatureEngineer
from config import CFG

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def prepare_features():
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    df = pd.read_csv(CFG.paths.train_csv)
    logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {df.shape[0]} —Å—Ç—Ä–æ–∫")

    engineer = FeatureEngineer()
    df_features = engineer.generate_features(df, fit=True)

    joblib.dump(engineer.scaler, CFG.paths.scaler_path)
    joblib.dump(engineer.feature_columns, CFG.paths.feature_columns_path)
    logging.info("‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω scaler –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    df_features[engineer.feature_columns].to_csv(CFG.paths.train_features_csv, index=False)
    logging.info(f"‚úÖ Features —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(engineer.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    np.save(CFG.paths.train_labels_direction, df['direction_class'].values)
    np.save(CFG.paths.train_labels_amplitude, df[['amplitude_up', 'amplitude_down']].values)
    logging.info("‚úÖ Labels —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

if __name__ == "__main__":
    prepare_features()
