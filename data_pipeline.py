import logging
import subprocess
import pandas as pd
from config import CFG

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

REQUIRED_COLUMNS = [
    'open', 'high', 'low', 'close', 'volume',
    'direction_class', 'amplitude_up', 'amplitude_down'
]

def validate_dataset():
    logging.info("üîé –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    df = pd.read_csv(CFG.paths.train_csv)
    missing_columns = [col for col in REQUIRED_COLUMNS if col not in df.columns]
    if missing_columns:
        logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        raise ValueError("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.")
    logging.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")

def run_script(script_name):
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_name} ...")
    result = subprocess.run(["python", script_name])
    if result.returncode != 0:
        raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name}")
    logging.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_name} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")

if __name__ == "__main__":
    logging.info("=== üî• –°—Ç–∞—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è ===")
    try:
        run_script("directional_label_generator.py")
        run_script("amplitude_label_generator.py")
        run_script("hit_order_label_generator.py")
        validate_dataset()
        run_script("prepare_features.py")
        run_script("train_direction.py")
        run_script("train_amplitude.py")
        run_script("train_hit_order.py")
        run_script("temperature_calibration.py")
        logging.info("=== üéØ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ ===")
    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
